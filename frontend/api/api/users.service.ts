/**
 * MEANS
 * Api dla MEANS
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jarek.frydrych@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { UserDetailsView } from '../model/userDetailsView';
import { UserNew } from '../model/userNew';
import { UsersListView } from '../model/usersListView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = 'http://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Pobieranie wybranego użytkownika
     * 
     * @param id Identyfikator użytkownika
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userDetailsQuery(id: string, observe?: 'body', reportProgress?: boolean): Observable<UserDetailsView>;
    public userDetailsQuery(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDetailsView>>;
    public userDetailsQuery(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDetailsView>>;
    public userDetailsQuery(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userDetailsQuery.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UserDetailsView>(`${this.basePath}/users/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edycja wybranego użytkownika
     * 
     * @param id Identyfikator użytkownika
     * @param content Dane użytkownika
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userDetailsUpdateHandler(id: string, content: UserDetailsView, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userDetailsUpdateHandler(id: string, content: UserDetailsView, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userDetailsUpdateHandler(id: string, content: UserDetailsView, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userDetailsUpdateHandler(id: string, content: UserDetailsView, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling userDetailsUpdateHandler.');
        }
        if (content === null || content === undefined) {
            throw new Error('Required parameter content was null or undefined when calling userDetailsUpdateHandler.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/users/${encodeURIComponent(String(id))}`,
            content,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Tworzenie usera
     * 
     * @param content Dane usera
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userNewHandler(content: UserNew, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public userNewHandler(content: UserNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public userNewHandler(content: UserNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public userNewHandler(content: UserNew, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (content === null || content === undefined) {
            throw new Error('Required parameter content was null or undefined when calling userNewHandler.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/users`,
            content,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Pobieranie listy userów
     * 
     * @param page Numer aktualnie wyświetlanej strony
     * @param count Liczba rekordów wyświetlanych na stronie
     * @param sortDirection Kierunek sortowania (rosnąco, malejąco)
     * @param sortOrder Kolumna, według której nastąpi sortowanie danych
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public usersListQuery(page?: number, count?: number, sortDirection?: string, sortOrder?: string, observe?: 'body', reportProgress?: boolean): Observable<UsersListView>;
    public usersListQuery(page?: number, count?: number, sortDirection?: string, sortOrder?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsersListView>>;
    public usersListQuery(page?: number, count?: number, sortDirection?: string, sortOrder?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsersListView>>;
    public usersListQuery(page?: number, count?: number, sortDirection?: string, sortOrder?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (count !== undefined) {
            queryParameters = queryParameters.set('count', <any>count);
        }
        if (sortDirection !== undefined) {
            queryParameters = queryParameters.set('sort_direction', <any>sortDirection);
        }
        if (sortOrder !== undefined) {
            queryParameters = queryParameters.set('sort_order', <any>sortOrder);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<UsersListView>(`${this.basePath}/users`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
